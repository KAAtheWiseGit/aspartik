from typing import List, Any, Optional, Sequence, Tuple
from collections.abc import Iterator

from .tree import Node, Leaf, Internal

__all__: List[str]

class State:
    def __init__(self, tree: Tree, params: Sequence[Parameter], rng: Rng): ...
    @property
    def tree(self) -> Tree: ...

    # TODO: proper type
    @property
    def rng(self) -> Any: ...

# TODO: get rid of the built-in Node
type AnyNode = Node | Internal | Leaf

type Rng = Any

class Tree:
    def __init__(self, num_leaves: int, rng: Rng): ...
    def update_weight(self, node: AnyNode, weigth: float) -> None: ...
    def update_root(self, node: AnyNode) -> None: ...
    def swap_parents(self, a: AnyNode, b: AnyNode) -> None: ...
    @property
    def num_nodes(self) -> int: ...
    @property
    def num_internals(self) -> int: ...
    @property
    def num_leaves(self) -> int: ...
    def is_internal(self, node: AnyNode) -> bool: ...
    def is_leaf(self, node: AnyNode) -> bool: ...
    def as_internal(self, node: AnyNode) -> Optional[Internal]: ...
    def as_leaf(self, node: AnyNode) -> Optional[Leaf]: ...
    def root(self) -> Internal: ...
    def weight_of(self, node: AnyNode) -> float: ...
    def children_of(self, node: Internal) -> Tuple[Node, Node]: ...
    def parent_of(self, node: AnyNode) -> Optional[Internal]: ...
    def random_node(self, rng: Rng) -> Node: ...
    def random_internal(self, rng: Rng) -> Internal: ...
    def random_leaf(self, rng: Rng) -> Leaf: ...
    def nodes(self) -> Iterator[Node]: ...
    def internals(self) -> Iterator[Internal]: ...
    def verify(self) -> None: ...
    def newick(self) -> str: ...

class Proposal:
    @staticmethod
    def Accept() -> Any: ...
    @staticmethod
    def Reject() -> Any: ...
    @staticmethod
    def Hastings(float) -> Any: ...

class Parameter:
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int | float | bool: ...
    def __setitem__(self, index: int, value: int | float | bool): ...
    @staticmethod
    def Real(*args: float) -> Any: ...
    @staticmethod
    def Integer(*args: int) -> Any: ...
    @staticmethod
    def Boolean(*args: bool) -> Any: ...
    def is_real(self) -> bool: ...
    def is_integer(self) -> bool: ...
    def is_boolean(self) -> bool: ...

class Likelihood:
    def __init__(self, data: str, substitution: Any): ...

# TODO: protocols for operators, priors, and loggers
def run(
    length: int,
    state: State,
    priors: Sequence[Any],
    operators: Sequence[Any],
    likelihood: Likelihood,
    loggers: Sequence[Any],
): ...
